package task2

// Определение структуры CubicSpline для хранения данных кубического сплайна.
type CubicSpline struct {
	x []float64 // Значения x
	y []float64 // Значения y
	m []float64 // Значения m (вторые производные)
}

// Создание нового кубического сплайна.
func NewCubicSpline(x, y []float64) *CubicSpline {
	n := len(x)
	m := make([]float64, n)

	// Вычисление вторых производных m.
	h := make([]float64, n-1)  // Выделение памяти для массива h.
	dy := make([]float64, n-1) // Выделение памяти для массива dy.
	for i := 0; i < n-1; i++ {
		h[i] = x[i+1] - x[i]           // Вычисление разницы между соседними значениями x.
		dy[i] = (y[i+1] - y[i]) / h[i] // Вычисление приращения функции y по x.
	}

	alpha := make([]float64, n) // Выделение памяти для массива alpha.
	beta := make([]float64, n)  // Выделение памяти для массива beta.
	alpha[0] = 0.0              // Установка начального значения alpha.
	beta[0] = 0.0               // Установка начального значения beta.

	// Вычисление коэффициентов alpha и beta для метода прогонки.
	for i := 1; i < n-1; i++ {
		alpha[i] = -h[i-1] / (h[i-1] + h[i])                // Вычисление alpha.
		beta[i] = 6.0 / (h[i-1] + h[i]) * (dy[i] - dy[i-1]) // Вычисление beta.
	}
	alpha[n-1] = 0.0 // Установка конечного значения alpha.
	beta[n-1] = 0.0  // Установка конечного значения beta.

	// Прямой ход метода прогонки для нахождения вторых производных.
	lambda := make([]float64, n) // Выделение памяти для массива lambda.
	mu := make([]float64, n)     // Выделение памяти для массива mu.
	lambda[1] = alpha[1]         // Установка начального значения lambda.
	mu[1] = beta[1]              // Установка начального значения mu.
	for i := 2; i < n-1; i++ {
		lambda[i] = alpha[i] / (1 - lambda[i-1]*alpha[i-1])                   // Вычисление lambda.
		mu[i] = (beta[i] - mu[i-1]*alpha[i-1]) / (1 - lambda[i-1]*alpha[i-1]) // Вычисление mu.
	}

	// Обратный ход метода прогонки.
	for i := n - 2; i > 0; i-- {
		m[i] = lambda[i]*m[i+1] + mu[i] // Вычисление вторых производных.
	}

	return &CubicSpline{x: x, y: y, m: m}
}

// Вычисление значения кубического сплайна в точке x.
func (s *CubicSpline) Eval(x float64) float64 {
	n := len(s.x)
	for i := 0; i < n-1; i++ {
		if x >= s.x[i] && x <= s.x[i+1] {
			h := s.x[i+1] - s.x[i]  // Вычисление шага.
			A := (s.x[i+1] - x) / h // Вычисление коэффициента A.
			B := (x - s.x[i]) / h   // Вычисление коэффициента B.
			// Вычисление значения кубического сплайна в точке x по формуле кубического сплайна.
			return A*s.y[i] + B*s.y[i+1] + ((A*A*A-A)*s.m[i]+(B*B*B-B)*s.m[i+1])*h*h/6
		}
	}
	return 0.0 // Возврат значения по умолчанию.
}
