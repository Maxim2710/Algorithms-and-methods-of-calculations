package controller

import "fmt"

func PrintMatrix(matrix [][]float64) {
	// Проходим по всем строкам матрицы
	for i := 0; i < len(matrix); i++ {
		// Проходим по всем элементам строки
		for j := 0; j < len(matrix[i]); j++ {
			// Выводим элемент матрицы с точностью до двух знаков после запятой
			fmt.Printf("%.2f ", matrix[i][j])
		}
		// Переходим на новую строку после вывода всех элементов строки
		fmt.Println()
	}
}

func MatrixMultiply(matrix [][]float64, vector []float64) []float64 {
	// Создаем массив для хранения результата умножения матрицы на вектор
	result := make([]float64, len(matrix))
	// Проходим по всем строкам матрицы
	for i := 0; i < len(matrix); i++ {
		// Инициализируем сумму для текущей строки
		sum := 0.0
		// Проходим по всем элементам строки
		for j := 0; j < len(vector); j++ {
			// Умножаем элемент матрицы на соответствующий элемент вектора и добавляем к сумме
			sum += matrix[i][j] * vector[j]
		}
		// Записываем сумму в результат для текущей строки
		result[i] = sum
	}
	// Возвращаем результат умножения матрицы на вектор
	return result
}

func DotProduct(a []float64, b []float64) float64 {
	// Инициализируем результат скалярного произведения
	result := 0.0
	// Проходим по всем элементам векторов
	for i := 0; i < len(a); i++ {
		// Умножаем соответствующие элементы векторов и добавляем к результату
		result += a[i] * b[i]
	}
	// Возвращаем скалярное произведение
	return result
}

func SubtractVectors(a []float64, b []float64) []float64 {
	// Создаем массив для хранения результата вычитания векторов
	result := make([]float64, len(a))
	// Проходим по всем элементам векторов
	for i := 0; i < len(a); i++ {
		// Вычитаем соответствующие элементы векторов и записываем в результат
		result[i] = a[i] - b[i]
	}
	// Возвращаем результат вычитания векторов
	return result
}

func MultiplyVectorByScalar(vector []float64, scalar float64) []float64 {
	// Создаем массив для хранения результата умножения вектора на скаляр
	result := make([]float64, len(vector))
	// Проходим по всем элементам вектора
	for i := 0; i < len(vector); i++ {
		// Умножаем элемент вектора на скаляр и записываем в результат
		result[i] = vector[i] * scalar
	}
	// Возвращаем результат умножения вектора на скаляр
	return result
}
